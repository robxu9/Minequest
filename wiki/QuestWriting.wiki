Details pertaining to Writing and Formating .quest files

=Introduction=

This page is a description of how to write individual pieces of a quest file. It does not go into the more creative aspects required in making a detailed quest, but more simply how each small piece is put together.

Currently two quests have been/are being written. One is significantly more in depth and exciting than the other. I'll let you be the judge of which. ]PirateShipQuest] and [DungeonQuest].

When developing a quest the following commands are vital.
{{{
/goto world_name [Nether or Normal]
/setworldtime world time
/debug
}}}

=Details=

Quest files are ":" delimited for the most part. This means there is a single colon between major fields of any line. The first field in every line determines what kind of line that will be. There are currently 4 types of lines and there will inevitably be more at time continues.

----

=World / Load World=
This option defines the place where the quest will take place, it should be the first thing in your quest file. Unless you want the quest to take place wherever the questers currently are. World is the simpler of the two of these as it simply loads the world specified the format is as follows.
{{{
World:world_name
}}}
The problem with this is that you might have wood that gets burned, or floors destroyed by traps, or even quest events that destroy your own dungeon. In the World option these affects are saved and the world cannot easily be reused. Load World is the alternative it takes two parameters, the first is the world where the quest will take place, any existing world with that name will be deleted and the second name is copied and used in its place.
{{{
LoadWorld:junk_name:unaffected_load_world
}}}
I plan on adding an Instance World option which will only take one parameter which is the name of the world to load from and randomly generates an available name to use for the world to quest in. This way multiple parties can load the same quest at the same time.

=Spawn=
This is used to set a re-spawn point for questers that are in the quest. If this is not set they will re-spawn at the re-spawn point for the world. This is vital for quests that block off the entrance point. This takes 3 doubles after it which are the spawn point.
{{{
Spawn:spawn_x:spawn_y:spawn_z
}}}

=Task / Repeating Task=
A task is a group of Events that will get activated when the task is issued. There are some Events that issue Tasks when certain things happen, and when Tasks are issued the activate Events. Tasks have an id (should be unique), and when Events that issue events are setup they must be given a Task id to activate. If the id is -1 then the quest is completed, and if the id is any other negative number then no task is issued. The task also takes a comma separated list of Event ids that should be activated when it is issued.
{{{
Task:id:event_id_1,event_id_2,event_id_3
}}}
A task will only activate the events one, so this is very useful for traps that go off once. Some traps you want to activate multiple times so a RepeatingTask can be used. This will activate the events every time that the task is issued.
{{{
Task:id:event_id_1,event_id_2,event_id_3
}}}

= Event =
There are many types of Events that can be used to construct various types of quests but they all have a few common parameters that can be mentioned. The first is the id, this is just like task id in that it is unique. The task and event id spaces do not collide, so if an Event has id 6 and a Task has id 6, they are not necessarily related. They all have an event name after this, this defines what the event will do. In all cases but Can Edit events, this is followed by a delay. The delay is in milliseconds and defines how often the event will check for triggers, or how long until the event occurs.
{{{
Event:id:EventName:delay ms:other event data
}}}

== Quest Event ==
This is one of the simplest events. It waits for the delay time to pass then will trigger the selected quest task.
{{{
Event:id:QuestTask:delay ms:task id
}}}

== Block Events ==
Block events take the location of a block and set it to a given type after the delay. It takes the x, y, z location of the block after the delay then takes the type as an int.
{{{
Event:id:BlockEvent:delay ms:x:y:z:type
}}}
There are two other block events currently implemented, Block Create Destroy and Block Destroy Create. They can be created using standard block events with delays, but this reduces the number of events. They take two delays, the first till they Create/Destroy and then second time between until they Destroy/Create. They also still take x, y, z, and type.
{{{
Event:id:BlockCDEvent/BlockDCEvent:delay ms:second_delay ms:x:y:z:type
}}}

== Message Event ==
A message event will send a message to all of the questers in the party that is in the quest. The only extra parameter is the message itself.
{{{
Event:id:MessageEvent:delay ms:message
}}}

== Lock World Time ==
This is used to keep the world a specific time of day, for instance a quest that takes place at night. It takes two relative times that it will keep the world between. When the world gets past the later time it will go back to the earlier time. Experimentation showed that keeping these times too close together would cause user disorientation. Its better to only see the time change every so often. Having multiples of this event in one quest may cause problems.
{{{
Event:id:LockWorldTime:check period:first time:second time
}}}

== Arrow Event ==
This launches an arrow when activated after the specified delay. It takes 6 doubles for the type, it has x, y, and z for both location and direction. The velocity and spread are set specifically inside the code, upon enough requests I would be happy to change this, I just don't currently see the need.
{{{
Event:id:ArrowEvent:delay ms:loc x:loc y: loc z: dir x: dir y: dir z
}}}

== Party Health Event ==
This sets the health of the entire party after the specified delay based on fraction.
{{{
Event:id:PartyHealthEvent:delay ms:fraction of max
}}}

== Entity Spawners ==
This section will describe the various types of entity spawners. They all take a creature type as a string and a location as ints.

=== Entity Spawner Event ===
This is the most generic entity spawner. It will spawn the specified creature type at the location. If the entity dies, it will re-spawn a new creature at the spawner. When the spawner is completed it will kill the entity it spawned if it is alive. The last parameter is either a t or an f for specifying whether the mob should be a super-mob or not (e.g. Poison Zombie).
{{{
Event:id:EntitySpawnerEvent:delay ms:loc x:loc y:loc z:super
}}}

=== Entity Spawner No Move Event ===
This is great if you want some mobs in the distance to look like they are commanding or if you want sounds of zombies but don't want them finding the players yet. Basically it will spawn the mobs in the location and keep them from moving. If for some reason they die before the event is completed it they will re-spawn. They will not be killed when the event it completed unlike the normal spawner.
{{{
Event:id:EntitySpawnerNoMove:delay ms:loc x:loc y:loc z:super
}}}

=== Health Entity Spawn ===
This is used to create an entity with a specific amount of health. This can be used to create a boss or even just a pig thats really hard to stop from squealing. This will hold the entity in place, keeping it from moving. When the entity is killed this event will issue a quest event with the id specified.
{{{
Event:id:HealthEntitySpawn:delay ms:task:loc x:loc y:loc z:health
}}}

== Entity Spawner Completion ==
Currently there are two events which will complete an entity spawn event, but more will probably come along as things develop.

=== Entity Spawner Complete ===
This completes any entity spawners with the event idd specified. It takes the ids as a comma separated list. As mentioned previously if it is a normal spawner the spawned entities will die.
{{{
Event:id:EntitySpawnerCompleteEvent:delay ms:event id 1,event id 2, event id 3
}}}

=== Entity Spawner No Move Complete ===
This complete event was designed for completing the Entity No Move Spawner. It completes any of the spawners with the ids specified however it also waits until the entities are dead, at which time it will issue a quest task. 
{{{
Event:id:EntitySpawnerCompleteNMEvent:delay ms:task:event id 1,event id 2, event id 3
}}}

== Area Events ==
These are events that issue quest tasks when areas are entered by questers. I promise more area events will be coming that are not only spherical.

=== Area Event ===
These are the generic form of area events. When the entire party has been in the area at one time or another the quest task will be issued. They do not all have to be standing in the area at once.
{{{
Event:id:AreaEvent:delay ms:task:loc x:loc y:loc z:radius
}}}

=== Single Area Event ===
This event works the same way as the previous except that it waits for any single quester to be inside the area. 
{{{
Event:id:AreaEvent:delay ms:task:loc x:loc y:loc z:radius
}}}